@page "/chat/{id}"
@using ChatApp.Domain.DTOs.MessageDto
@using ChatApp.UI.Services.MessageApplicationService.Interfaces
@using ChatApp.Domain.DTOs.Http
@using ChatApp.Domain.DTOs.UserDto
@using ChatApp.UI.Services.RoomApplicationService.Interfaces
@using ChatApp.UI.Services.SignalRService.Interfaces
@using Microsoft.IdentityModel.Tokens
@using ChatApp.UI.Pages.User
@using ChatApp.UI.Services.UserApplicationService.Interfaces
@attribute [Authorize]

<h3>Chat: @_chatName</h3>

<ContextMenu Id="messageMenu">
    <Item OnClick="@OnEditClick">Edit</Item>
    <Item OnClick="@OnDeleteClick">Delete</Item>
</ContextMenu>


<RadzenButton Click=@OnCallClick Text="Start call" Icon="input" ButtonStyle="ButtonStyle.Success"/>


<div style="display: flex; flex-direction: column">
    <div>
        <div style="display: flex; flex-direction: column; width: 80%; height: 80%; min-height: 550px; max-height: 550px; max-width: 1400px; margin-left: auto; margin-right: auto; padding: 20px; background-color: #3F3075; border: 1px solid #ccc; border-radius: 5px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); overflow: auto;">
            @if (Messages.Count > 0)
            {
                @foreach (var message in Messages)
                {
                    if (message.SenderUsername.Equals(_userName))
                    {
                        <ContextMenuTrigger WrapperTag="div" MenuId="messageMenu" Data="message">
                            <div class="message-container-sender">
                                <p style="color: #fff; margin-left: 10px; font-weight: bold; margin-bottom: 0px;">@message.SenderUsername</p>
                                <p style="color: #fff; margin-left: 10px;">@message.Content</p>
                                <span style="font-size: 0.8em; color: #fff; margin-left: 10px; align-self: flex-end;">@message.SentAt.ToString("HH:mm")</span>
                            </div>
                        </ContextMenuTrigger>
                    }
                    else
                    {
                        <div style="display: flex; flex-direction: column; padding: 2px; margin-bottom: 10px; max-width: 70%; background-color: #605396; color: #fff; align-self: flex-start; border-radius: 35px 5px 35px 5px;">
                            <p style="color: #fff; margin-left: 10px; font-weight: bold; margin-bottom: 0px;">@message.SenderUsername</p>
                            <p style="margin-left: 10px;">@message.Content</p>
                            <span style="font-size: 0.8em; color: #fff; margin-left: 10px; align-self: flex-start;">@message.SentAt.ToString("HH:mm")</span>
                        </div>
                    }
                }
            }
        </div>

        <div class="input" style="height: 15%; display: flex; justify-content: center">
            <div style="display: flex; align-items: center;">
                <RadzenTextArea Style="resize: none;" Placeholder="Enter here..." MaxLength="400" @bind-Value="@Input" class="w-100 mb-2"/>
                <RadzenButton Icon="send" Class="btn btn-primary" Click="@OnSendClick" style="margin-left: 8px;"/>
            </div>
        </div>
    </div>
    <div style="width: 250px;">
        <AddUserGrid Id="@Id"/>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private string _userId;
    private string _userName;
    private string _chatName;
    private string _chatId;
    private (bool InProcess, MessageDto? Message) _isEditing = (false, null);
    protected string Input { get; set; }
    private List<MessageDto> Messages { get; set; } = new List<MessageDto>();
    private UserDto _currentUser;

    [Inject]
    NotificationService NotificationService { get; set; } = null!;

    [Inject]
    NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    IMessageApplicationService MessageApplicationService { get; set; } = null!;

    [Inject] 
    IRoomApplicationService RoomApplicationService { get; set; } = null!;

    [Inject]
    IUserApplicationService UserApplicationService { get; set; } = null!;

    [CascadingParameter]
    ISignalRService SignalRService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        //TODO: check if current user is participant
        var room = await RoomApplicationService.GetRoomAsync(Id);

        if (room.Name.IsNullOrEmpty())
        {
            NavigationManager.NavigateTo("/roomgrid");
            return;
        }   
        _chatName = room.Name;
        _chatId = room.Id.ToString();
        _currentUser = await UserApplicationService.GetUserAsync();

        _userId = _currentUser.Id.ToString();
        _userName = _currentUser.Username;

        Messages = await MessageApplicationService.GetMessagesAsync(Id);

        await SignalRService.AddToOnline(Id);

        SignalRService.OnItemDelete += OnMessageDelete;
        SignalRService.OnItemReceived += OnMessageReceived;
        SignalRService.OnItemUpdate += OnMessageUpdate;

        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void OnCallClick()
    {
        SignalRService.NotifyAboutCall(_chatId, _chatName, _userName);
        NavigationManager.NavigateTo($"/call/{Id}");
    }

    public async Task OnSendClick()
    {
        if (!string.IsNullOrEmpty(Input))
        {
            if (!_isEditing.InProcess)
            {
                var addMessageDto = new AddMessageDto
                {
                    SentAt = DateTime.Now,
                    Content = Input,
                    UserId = _userId,
                    RoomId = int.Parse(Id)
                };

                var message = await MessageApplicationService.AddMessageAsync(addMessageDto);
                await SignalRService.SendMessage(Id, message);
            }
            else
            {
                _isEditing.Message!.Content = Input;
                await MessageApplicationService.UpdateMessageAsync(_isEditing.Message!);
                await SignalRService.UpdateMessageAsync(Id, _isEditing.Message!);
            }
            _isEditing.InProcess = false;
            _isEditing.Message = null;
            Input = string.Empty;
        }

        else
        {
            NotificationService.Notify(new NotificationMessage
            {
                Summary = "Type something!",
                Severity = NotificationSeverity.Warning,
                Duration = 3000,
            });
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        SignalRService.OnItemReceived -= OnMessageReceived;
        SignalRService.OnItemUpdate -= OnMessageUpdate;
        SignalRService.OnItemDelete -= OnMessageDelete;

        if (!args.Location.Equals("https://localhost:7000/logout"))
            await SignalRService.AddToOffline(Id);
        else
            NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    void OnMessageReceived(MessageDto message)
    {
        Messages.Add(message);
        StateHasChanged();
    }

    void OnMessageDelete(MessageDto message)
    {
        Messages = Messages.Where(m => m.Id != message.Id).ToList();
        StateHasChanged();
    }

    void OnMessageUpdate(MessageDto message)
    {
        Messages.FirstOrDefault(m => m.Id == message.Id)!.Content = message.Content;
        StateHasChanged();
    }

    private void OnEditClick(ItemClickEventArgs arg)
    {
        var message = arg.Data as MessageDto;
        _isEditing.InProcess = true;
        _isEditing.Message = message;
        Input = message.Content;
    }

    private async Task OnDeleteClick(ItemClickEventArgs arg)
    {
        var message = arg.Data as MessageDto;
        await MessageApplicationService.DeleteMessageByIdAsync(message.Id);
        await SignalRService.DeleteMessageAsync(Id, message);
    }
}